%import common.WS
%ignore WS

start: program
program: global_dec func_def "shimenet" "kween" "(" ")" "{" kween_body "}" func_def 
global_dec: var_dec_init global_dec  |  
var_dec_init: naur_case data_type "id" var_dec_init_tail ";"  |  
naur_case: "naur"  |  
return_type: data_type  | "shimenet" 
data_type: "anda"  | "andamhie"  | "chika"  | "eklabool" 
var_dec_init_tail: func_case  | array_case var_init  |  
func_case: "(" arguments ")" 
arguments: func_arguments multi_arguments  |  
func_arguments: argument_type "id" 
argument_type: data_type  |  
multi_arguments: "," func_arguments multi_arguments  |  
array_case: "[" array_values "]" twod_index  |  
twod_index: "[" array_values "]" threed_index  |  
threed_index: "[" array_values "]"  |  
array_values: expression_operands 
literals: "anda_literal"  | "andamhie_literal"  | "chika_literal"  | eklabool 
eklabool: "korik"  | "eme" 
func_array: func_array_value  |  
func_array_value: "(" arguments ")"  | array_case 
var_init: "=" init_values multi_init_values  |  
multi_init_values: "," "id" array_case "=" init_values multi_init_values  |  
init_values: "{" array_elements "}"  | expression 
array_elements: array_values extra_array_value  | "{" twod_array_elements "}" extra_twod_array_value 
twod_array_elements: array_values extra_array_value  | "{" array_values extra_array_value "}" extra_twod_array_value  |  
extra_array_value: "," array_values extra_array_value  |  
extra_twod_array_value: "," "{" extra_threed_array_value "}" extra_twod_array_value  |  
extra_threed_array_value: array_values extra_array_value  | "{" array_values extra_array_value "}" extra_twod_array_value  |  
func_def: return_type "id" "(" parameters ")" "{" func_body "}" func_def  |  
parameters: arguments 
func_body: local_dec statements "<multi-statements>" 
local_dec: var_dec_init array_assign local_dec  |  
func_assign: "id" "=" func_call 
func_call: "id" "(" arguments ")" 
array_assign: "id" array_case "=" array_values ";"  |  
kween_body: func_body 
expression: simple_expression  | multi_expression 
simple_expression: expression_operands expression_tail 
multi_expression: "(" expression ")" more_expression 
more_expression: general_operators expression_operands more_expression  |  
expression_tail: general_operators expression_operands more_expression  |  
expression_operands: negative_value expression_value 
negative_value: "-"  |  
expression_value: unary_operator "id"  | "id" identifier_tail  | general_operands 
identifier_tail: func_array  | unary_operator  |  
unary_operator: "--"  | "++" 
general_operands: literals 
general_operators: "+"  | "+="  | "-"  | "%"  | "/"  | "*"  | "**"  | "//"  | ">"  | "<"  | ">="  | "<="  | "=="  | "!="  | "="  | "&&"  | "||"  | "!" 
statements: assign_stmts statements  | input_stmts statements  | output_stmts statements  | conditional_stmts statements  | loop_stmts statements  | switch_stmts statements  | control_flow_stmts statements  | return_stmts statements  |  
assign_stmts: "id" arithmetic_operators "=" assignment_values ";" 
arithmetic_operators: "+"  | "-"  | "%"  | "/"  | "//"  | "*"  | "**" 
assignment_values: expression_operands 
input_stmts: input_type "id" "=" "givenchy" "(" givenchy_values ")" ";" 
input_type: data_type  |  
givenchy_values: expression_operands 
output_stmts: "serve" "(" output_values ")" ";" 
output_values: expression_operands 
conditional_stmts: "pak" "(" condition ")" "{" conditional_body "}" ganern_pak_statement ganern_case 
condition: expression_operands 
conditional_body: local_dec statements "<multi-statements>" 
ganern_pak_statement: "ganern" "pak" "(" condition ")" "{" conditional_body "}" ganern_pak_statement  |  
ganern_case: "ganern" "{" conditional_body "}"  |  
loop_stmts: forda_statement  | keri_statement 
forda_statement: "forda" "(" loop_type_init "id" "from" start_value "to" end_value step_case ")" "{" for_loop_body "}" 
loop_type_init: data_type  |  
start_value: loop_conditions 
end_value: loop_conditions 
step_case: "step" "<update>"  |  
loop_conditions: expression_operands 
for_loop_body: local_dec statements "<multi-statements>" 
keri_statement: "keri" keri_case 
keri_case: "(" condition ")" "{" while_loop_body "}"  | "lang" "{" while_loop_body "}" "keri" "(" condition ")" ";" 
while_loop_body: local_dec statements "<multi-statements>" 
switch_stmts: "versa" "(" switch_values ")" "{betsung" switch_values ":" switch_statements amaccana_case ";" multi_cases ditech_case switch_statements "}" 
multi_cases: "betsung" switch_values ":" switch_statements amaccana_case ";" multi_cases  |  
switch_values: expression_operands 
switch_statements: local_dec statements "<multi-statements>" 
amaccana_case: "amaccana"  |  
ditech_case: "ditech" ":"  |  
control_flow_stmts: "gogogo" ";"  | "amaccana" ";" 
return_stmts: "push" push_values ";"  |  
push_values: expression  |  
